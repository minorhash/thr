<script src="thr/three.js"></script>
<script src="thr/ana.js"></script>
<script src="thr/WebGL.js"></script>


<script>
if ( WEBGL.isWebGLAvailable() === false ) {
document.body.appendChild( WEBGL.getWebGLErrorMessage() );
}
var container, camera, scene, renderer, effect;
var spheres = [];
var mouseX = 0;
var mouseY = 0;
var windowHalfX = window.innerWidth / 2;
var windowHalfY = window.innerHeight / 2;
document.addEventListener( 'mousemove', onDocumentMouseMove, false );
init();
animate();

function init() {
container = document.createElement( 'div' );
document.body.appendChild( container );

var tx1="webgl"
var p1= document.createElement( 'p' );
p1.style.position = 'absolute';
p1.style.fontSize= 'xx-large';
//p1.style.backgroundColor= "lightblue"
//p1.style.opacity=0.5 
p1.style.color= 'white';
p1.style.textShadow= '2px 2px 1px #000000';
p1.style.top = '50px';
p1.style.width = '100%';
p1.style.textAlign = 'center';
p1.innerHTML = tx1
container.appendChild(p1);

var tx2="next >"
var ref= document.createElement('a');
    ref.setAttribute("id","nex")
    ref.setAttribute("href","/page-geo")

ref.style.position = 'absolute';
ref.style.top = window.innerHeight-250+"px";
ref.style.width = '100%';
ref.style.color= 'white';
ref.style.fontSize= 'xx-large';
ref.style.backgroundColor= 'gray';
ref.style.textAlign = 'center';
ref.innerHTML = tx2

container.appendChild(ref);

camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.01, 100 );
camera.position.z = 3;
camera.focalLength = 3;
var path = "img/pisa/";
var format = '.png';
var urls = [
path + 'px' + format, path + 'nx' + format,
path + 'py' + format, path + 'ny' + format,
path + 'pz' + format, path + 'nz' + format
];
var textureCube = new THREE.CubeTextureLoader().load( urls );
scene = new THREE.Scene();
scene.background = textureCube;
var geometry = new THREE.SphereBufferGeometry( 0.1, 32, 16 );
var material = new THREE.MeshBasicMaterial( { color: "white", envMap: textureCube } );

for ( var i = 0; i < 500; i ++ ) {
var mesh = new THREE.Mesh( geometry, material );
mesh.position.x = Math.random() * 10 - 5;
mesh.position.y = Math.random() * 10 - 5;
mesh.position.z = Math.random() * 10 - 5;
mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;
scene.add( mesh );
spheres.push( mesh );
}
//
renderer = new THREE.WebGLRenderer();
renderer.setPixelRatio( window.devicePixelRatio );
container.appendChild( renderer.domElement );
var width = window.innerWidth || 2;
var height = window.innerHeight || 2;
effect = new THREE.AnaglyphEffect( renderer );
effect.setSize( width, height );
//
window.addEventListener( 'resize', onWindowResize, false );
}
function onWindowResize() {
windowHalfX = window.innerWidth / 2;
windowHalfY = window.innerHeight / 2;
camera.aspect = window.innerWidth / window.innerHeight;
camera.updateProjectionMatrix();
effect.setSize( window.innerWidth, window.innerHeight );
}
function onDocumentMouseMove( event ) {
mouseX = ( event.clientX - windowHalfX ) / 100;
mouseY = ( event.clientY - windowHalfY ) / 100;
}
//
function animate() {
requestAnimationFrame( animate );
render();
}
function render() {
var timer = 0.00001 * Date.now();
camera.position.x += ( mouseX - camera.position.x ) * .05;
camera.position.y += ( - mouseY - camera.position.y ) * .05;
camera.lookAt( scene.position );
for ( var i = 0, il = spheres.length; i < il; i ++ ) {
var sphere = spheres[ i ];
sphere.position.x = 5 * Math.cos( timer + i );
sphere.position.y = 5 * Math.sin( timer + i * 1.1 );
}
effect.render( scene, camera );
}
</script>

