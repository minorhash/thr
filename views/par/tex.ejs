<script src="thr/three.js"></script>
<script src="thr/WebGL.js"></script>

<script>
if ( WEBGL.isWebGLAvailable() === false ) {
document.body.appendChild( WEBGL.getWebGLErrorMessage() );
}
var container;
var camera, scene, renderer;
var group, cubes;
init();
animate();
function addImageBitmap() {
new THREE.ImageBitmapLoader()
.setOptions( { imageOrientation: 'none' } )
.load( 'img/earth_atmos_2048.jpg?' + performance.now(), function ( imageBitmap ) {
var texture = new THREE.CanvasTexture( imageBitmap );
var material = new THREE.MeshBasicMaterial( { map: texture } );
/* ImageBitmap should be disposed when done with it
   Can't be done until it's actually uploaded to WebGLTexture */
// imageBitmap.close();
addCube( material );
}, function ( p ) {
console.log( p );
}, function ( e ) {
console.log( e );
} );
}

function addImage() {
new THREE.ImageLoader()
.setCrossOrigin( '*' )
.load( 'img/earth_atmos_2048.jpg?' + performance.now(), function ( image ) {
var texture = new THREE.CanvasTexture( image );
var material = new THREE.MeshBasicMaterial( { color: 0xff8888, map: texture } );
addCube( material );
} );
}
var geometry = new THREE.BoxBufferGeometry( 1, 1, 1 );
function addCube( material ) {
var cube = new THREE.Mesh( geometry, material );
cube.position.set( Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1 );
cube.rotation.set( Math.random() * 2 * Math.PI, Math.random() * 2 * Math.PI, Math.random() * 2 * Math.PI );
cubes.add( cube );
}
function init() {
container = document.createElement( 'div' );
document.body.appendChild( container );
// CAMERA
camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 1500 );
camera.position.set( 0, 4, 7 );
camera.lookAt( 0, 0, 0 );
// SCENE
scene = new THREE.Scene();
//
group = new THREE.Group();
scene.add( group );
group.add( new THREE.GridHelper( 4, 12 ) );
cubes = new THREE.Group();
group.add( cubes );
// RENDERER
renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setPixelRatio( window.devicePixelRatio );
renderer.setSize( window.innerWidth, window.innerHeight );
container.appendChild( renderer.domElement );
// TESTS
setTimeout( addImage, 300 );
setTimeout( addImage, 600 );
setTimeout( addImage, 900 );
setTimeout( addImageBitmap, 1300 );
setTimeout( addImageBitmap, 1600 );
setTimeout( addImageBitmap, 1900 );
// EVENTS
window.addEventListener( 'resize', onWindowResize, false );
}
function onWindowResize() {
camera.aspect = window.innerWidth / window.innerHeight;
camera.updateProjectionMatrix();
renderer.setSize( window.innerWidth, window.innerHeight );
}
function animate() {
group.rotation.y = performance.now() / 3000;
renderer.render( scene, camera );
requestAnimationFrame( animate );
}
</script>

