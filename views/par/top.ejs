<script src="lib/jquery.js"></script>
<script src="thr/three.js"></script>
<script src="tx/top.js"></script>
<div id="w" class="bg-ali"></div>

<script>
var SCREEN_WIDTH = window.innerWidth;
var SCREEN_HEIGHT = window.innerHeight;
var aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
var container, stats;
var camera, scene, renderer, mesh;
var cameraRig, activeCamera, activeHelper;
var cameraPerspective, cameraOrtho;
var cameraPerspectiveHelper, cameraOrthoHelper;
var frustumSize = 600;
init();
animate();

function init() {
container = document.createElement( 'div' );
document.body.appendChild( container );
scene = new THREE.Scene();

var w=window.innerWidth
var h=window.innerHeight

var info = document.createElement( 'div' );
info.style.position = 'absolute';
info.style.backgroundColor= "lightblue"

info.style.color= 'black';
if(w>700){
info.style.fontSize= 36+'px';
}else{
info.style.fontSize= 24+'px';
}

info.style.fontFamily= 'Takao';
info.style.top = '50px';
info.style.width = '100%';
//info.style.textShadow= '3px 3px 8px #ffffff';
info.style.textAlign = 'center';
info.innerHTML = tx1
container.appendChild( info );

var lab2 = document.createElement( 'div' );
lab2.style.position = 'absolute';
//lab2.style.backgroundColor= "lightblue"
//lab2.style.opacity=0.5 
lab2.style.color= 'white';
lab2.style.fontSize= 'xx-large';
lab2.style.top = 200+"px";
lab2.style.width = '100%';
lab2.style.textShadow= '3px 3px 2px #000000';
lab2.style.textAlign = 'center';
lab2.innerHTML = tx2
container.appendChild( lab2 );

var nex="next >"
var ref= document.createElement('a');
ref.setAttribute("id","nex")
ref.setAttribute("href","/page-1")

ref.style.position = 'absolute';
ref.style.top = window.innerHeight-100+"px";
ref.style.width = '100%';
ref.style.color= 'white';
ref.style.fontSize= 'xx-large';
ref.style.backgroundColor= 'gray';
ref.style.textAlign = 'center';
ref.innerHTML = nex

container.appendChild(ref);

//
camera = new THREE.PerspectiveCamera( 50, 1 * aspect, 1, 10000 );
camera.position.z = 2500;
cameraPerspective = new THREE.PerspectiveCamera( 50, 1 * aspect, 150, 1000 );
cameraPerspectiveHelper = new THREE.CameraHelper( cameraPerspective );
scene.add( cameraPerspectiveHelper );
//
cameraOrtho = new THREE.OrthographicCamera( 1 * frustumSize * aspect / - 2, 1 * frustumSize * aspect , frustumSize , frustumSize / - 2, 150, 1000 );
cameraOrthoHelper = new THREE.CameraHelper( cameraOrtho );
scene.add( cameraOrthoHelper );
//
activeCamera = cameraPerspective;
activeHelper = cameraPerspectiveHelper;
// counteract different front orientation of cameras vs rig
cameraOrtho.rotation.y = Math.PI;
cameraPerspective.rotation.y = Math.PI;
cameraRig = new THREE.Group();
cameraRig.add( cameraPerspective );
cameraRig.add( cameraOrtho );
scene.add( cameraRig );
//
mesh = new THREE.Mesh(
new THREE.SphereBufferGeometry( 100, 16, 8 ),
new THREE.MeshBasicMaterial( { color: 0xffffff, wireframe: true } )
);
scene.add( mesh );
var mesh2 = new THREE.Mesh(
new THREE.SphereBufferGeometry( 50, 16, 8 ),
new THREE.MeshBasicMaterial( { color: 0x00ff00, wireframe: true } )
);
mesh2.position.y = 150;
mesh.add( mesh2 );
var mesh3 = new THREE.Mesh(
new THREE.SphereBufferGeometry( 5, 16, 8 ),
new THREE.MeshBasicMaterial( { color: 0x0000ff, wireframe: true } )
);
mesh3.position.z = 150;
cameraRig.add( mesh3 );
//
var geometry = new THREE.BufferGeometry();
var vertices = [];
for ( var i = 0; i < 10000; i ++ ) {
vertices.push( THREE.Math.randFloatSpread( 2000 ) ); // x
vertices.push( THREE.Math.randFloatSpread( 2000 ) ); // y
vertices.push( THREE.Math.randFloatSpread( 2000 ) ); // z
}
geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
var particles = new THREE.Points( geometry, new THREE.PointsMaterial( { color: 0x888888 } ) );
scene.add( particles );
//
renderer = new THREE.WebGLRenderer( { antialias: true } );
renderer.setPixelRatio( window.devicePixelRatio );
renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
container.appendChild( renderer.domElement );
renderer.autoClear = false;
//
//
}
//
function onWindowResize() {
SCREEN_WIDTH = window.innerWidth;
SCREEN_HEIGHT = window.innerHeight;
aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
camera.aspect = 1 * aspect;
camera.updateProjectionMatrix();
cameraPerspective.aspect = 1 * aspect;
cameraPerspective.updateProjectionMatrix();
cameraOrtho.left = - 1 * frustumSize * aspect / 1;
cameraOrtho.right = 1 * frustumSize * aspect / 1;
cameraOrtho.top = frustumSize / 1;
cameraOrtho.bottom = - frustumSize / 1;
cameraOrtho.updateProjectionMatrix();
}
//
function animate() {
requestAnimationFrame( animate );
render();
//stats.update();
}
function render() {
var r = Date.now() * 0.0005;
mesh.position.x = 700 * Math.cos( r );
mesh.position.z = 700 * Math.sin( r );
mesh.position.y = 700 * Math.sin( r );
mesh.children[ 0 ].position.x = 70 * Math.cos( 2 * r );
mesh.children[ 0 ].position.z = 70 * Math.sin( r );

cameraOrtho.far = mesh.position.length();
cameraOrtho.updateProjectionMatrix();
cameraOrthoHelper.update();
cameraOrthoHelper.visible = true;
cameraPerspectiveHelper.visible = false;

cameraRig.lookAt( mesh.position );
renderer.clear();
renderer.setViewport( 0, 0, SCREEN_WIDTH , SCREEN_HEIGHT );
//renderer.render( scene, activeCamera );
renderer.render( scene, camera );
}
</script>


